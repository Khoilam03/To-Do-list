name: CI/CD for Local Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        echo "Building Docker image"
        docker buildx build --tag your-dockerhub-username/to-do-list_app:latest --push .
        echo "Listing Docker images after build"
        docker images

    - name: Pull Docker image
      run: |
        echo "Pulling Docker image"
        docker pull your-dockerhub-username/to-do-list_app:latest

    - name: List Docker images in runner environment
      run: |
        echo "Listing Docker images in runner environment:"
        docker images

    - name: Deploy Docker containers
      run: |
        echo "Running docker-compose up"
        docker-compose -f docker-compose.yml up -d
        echo "Listing running Docker containers after compose up"
        docker ps

    - name: Check container logs
      run: |
        container_id=$(docker ps -q -f "ancestor=your-dockerhub-username/to-do-list_app:latest")
        echo "Container ID: $container_id"
        if [ -n "$container_id" ]; then docker logs $container_id; else echo "Container not found"; fi

    - name: Test application inside the container
      run: |
        container_id=$(docker ps -q -f "ancestor=your-dockerhub-username/to-do-list_app:latest") && \
        echo "Container ID: $container_id" && \
        if [ -n "$container_id" ]; then docker exec $container_id curl --fail http://localhost:8000; else echo "Container not found"; exit 1; fi
