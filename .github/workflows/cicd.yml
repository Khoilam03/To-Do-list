name: CI/CD for Local Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Python setup and testing steps
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'  # Adjust the version as needed

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        python manage.py test

    # Node.js setup and testing steps
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # Adjust the version as needed

    - name: Install Node.js dependencies
      working-directory: ./frontend
      run: |
        npm install

    - name: Run JavaScript tests
      working-directory: ./frontend
      run: |
        npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker images
      run: |
        docker buildx build --tag to-do-list_app:latest --load .
    
    - name: List Docker images
      run: |
        docker images

    - name: Deploy Docker containers
      run: |
        docker-compose -f docker-compose.yml up -d
    
    - name: List running Docker containers
      run: |
        docker ps -a

    - name: Check container logs
      run: |
        container_id=$(docker ps -q -f "ancestor=to-do-list_app:latest")
        echo "Container ID: $container_id"
        if [ -n "$container_id" ]; then docker logs $container_id; else echo "Container not found"; fi

    - name: Test application inside the container
      run: |
        container_id=$(docker ps -q -f "ancestor=to-do-list_app:latest") && \
        echo "Container ID: $container_id" && \
        if [ -n "$container_id" ]; then docker exec $container_id curl --fail http://localhost:8000; else echo "Container not found"; exit 1; fi
