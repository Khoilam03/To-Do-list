name: CI/CD for Docker, ECR, and SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonarQube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install SonarQube Scanner
        run: npm install -g sonarqube-scanner

      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
          -Dsonar.projectKey=Khoilam03_To-Do-list \
          -Dsonar.organization=khoilam03 \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Check SonarCloud Quality Gate
        id: check_quality_gate
        run: |
          qualityGateStatus=$(curl -sS -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Khoilam03_To-Do-list" \
            | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $qualityGateStatus"
          echo "::set-output name=status::$qualityGateStatus"

  build-and-test:
    needs: sonarQube
    runs-on: ubuntu-latest
    if: needs.sonarQube.outputs.status == 'OK'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: |
          npm install

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm run build

      - name: Run JavaScript tests
        working-directory: ./frontend
        run: |
          npm test

  manual-approval:
    needs: sonarQube
    runs-on: ubuntu-latest
    if: needs.sonarQube.outputs.status != 'OK'

    steps:
      - name: Post comment for approval
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            SonarCloud analysis has failed. Do you want to proceed with the merge? Please add a comment with "approved" to continue.

      - name: Wait for approval
        id: wait_for_approval
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
            const checkApproval = async () => {
              const { data: comments } = await github.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              return comments.some((comment) => /approved/i.test(comment.body));
            };

            let approved = false;
            const timeout = Date.now() + 3600 * 1000;  // 1 hour timeout
            while (Date.now() < timeout) {
              approved = await checkApproval();
              if (approved) break;
              await wait(15000);  // Wait for 15 seconds
            }

            if (!approved) {
              core.setFailed("Approval not received within the time limit.");
            }

            return approved;

      - name: Proceed if approved
        if: steps.wait_for_approval.outputs.result == 'true'
        run: echo "Approved. Proceeding with the build and test."
